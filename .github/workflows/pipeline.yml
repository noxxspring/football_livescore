name: Build and Deploy Spring Boot Application

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache Maven dependencies
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'

    - name: Build with Maven
      run: mvn clean install 
      working-directory: ./Football-updates


    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: ./Football-updates/target/Football-updates-0.0.1-SNAPSHOT.jar


      # Step 3: Copy the built `.jar` file to the EC2 instance using SCP
    - name: Deploy to EC2 via SCP
      run: |
          scp -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY }} target/your-app.jar ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/your-app.jar

      # Step 4: SSH into the EC2 instance and restart the Spring Boot application
    - name: Restart Application on EC2
      run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_PRIVATE_KEY }} ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            # Stop the application if it's running
            if pgrep -f "java -jar /home/ubuntu/your-app.jar"; then
              echo "Stopping existing Spring Boot application..."
              pkill -f "java -jar /home/ubuntu/your-app.jar"
            fi
            # Run the new Spring Boot application
            echo "Starting new Spring Boot application..."
            nohup java -jar /home/ubuntu/your-app.jar > /dev/null 2>&1 &
            exit
          EOF
